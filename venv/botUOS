#buy  MarketData
# import asyncio
# from kucoin.client import WsToken
# from kucoin.ws_client import KucoinWsClient
import time
from random import seed
from random import randint
seed(2)
txMax = 5
#from kucoin.client import Market
#client = Market(url='https://api.kucoin.com')
#client = Market()

# or connect to Sandbox
#market = Market(url='https://openapi-sandbox.kucoin.com')
#market = Market(is_sandbox=True)
api_key = '5fba3c542bf81d000732c33a'
api_secret = '9ea92efa-107d-4b7a-b5fd-e10e5e179f39'
api_passphrase = 'uosisfuturo'
def returnBid(symbol):
    book = market.get_aggregated_order(symbol)
    return book['bids'][1][0]
# print(bid)
# book = client.get_aggregated_order('BTC-USDT')
# print(book)
#klines = client.get_kline('BTC-USDT',1609254300, 1609164360)
#print(klines)
from kucoin.client import User
user = User(api_key, api_secret, api_passphrase, is_sandbox=True)
def returnAccountAvailable(token):
    account = user.get_account_list(token, "trade")
    return account[0]['available']
def returnPrice(token):
    account = market.get_ticker(token)
    return account['price']
#price = returnPrice('BTC-USDT')
#print(price)
# available = returnAccountAvailable("USDT")
# print(available)
# async def main():
#     async def deal_msg(msg):
#         if msg['topic'] == '/market/level3:BTC-USDT':
#             print(msg["data"])
#         elif msg['topic'] == '/market/level3:KCS-USDT':
#             print(f'Get KCS level3:{msg["data"]}')
#client = WsToken(key= api_key, secret=api_secret, passphrase=api_passphrase, is_sandbox=True, url='')
# client = WsToken(is_sandbox=True)
# ws_client = await KucoinWsClient.create(None, client, deal_msg, private=False)
# await ws_client.subscribe('/market/ticker:BTC-USDT,ETH-USDT')
# from kucoin.client import Trade
# client = Trade(api_key, api_secret, api_passphrase, is_sandbox=True)
# client = Trade(api_key, api_secret, api_passphrase)
# # order_id = client.get_order_details('5fba98ed9def070006002197')
# # order_id = client.cancel_order(self, orderId)('USDT-BTC', 'buy', size='1')
# print(order_id)

while(1):
      available = returnAccountAvailable('USDT')
     # print(f'available= {available}')
     debut = time.time()
     bid = returnBid('BTC-USDT')
     try:
         order = client.create_limit_order('BTC-USDT', 'sell', randint(1,txMax), bid)
         print(order)
         fin = time.time()
         print(fin - debut)
         time.sleep(randint(10, 120))
     except Exception as err:
         print(err)
         break
